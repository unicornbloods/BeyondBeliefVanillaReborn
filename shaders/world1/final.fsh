#version 120
//////////ADJUSTABLE VARIABLES//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////ADJUSTABLE VARIABLES//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define EBrightness 0.55//[0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00]

#define FGrain	
	#define FGStrength 0.08

//////////INTERNAL VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////INTERNAL VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uniform sampler2D colortex0;

varying vec2 texcoord;

uniform float frameTimeCounter;

//////////////////////////FUNCTIONS//////////////////////////////////////////////////////////////////////////////////
//////////////////////////FUNCTIONS//////////////////////////////////////////////////////////////////////////////////

/*#include "/lib/LensFlares.glsl"*/

float randFilmGrain(in vec2 refcoord) { //just a noise function, calculates noise based on the given coord
    return fract(sin(dot(refcoord.st, vec2(12.9898, 78.233))) * 43758.5453);
}

void FilmGrain(inout vec3 color) {
    float brightness = dot(color.rgb, vec3(0.2627, 0.6780, 0.0593)); //gets brightness of screen
    float strength = FGStrength * (1.0 - brightness * 1.9); //applies brightness to strength
    vec2 refcoord = texcoord.st + frameTimeCounter * 0.01; //makes the texcoord move over time because the offset is frameTimeCounter which changes after every frame multiplied with 0.01 to make it slower than it is by default
    color += vec3(randFilmGrain(refcoord + 0.1), randFilmGrain(refcoord), randFilmGrain(refcoord - 0.1)) * strength; //use the moving texcoord to make the whole noise move and use offsets for the red and blue channel to make the noise colored, without the offset red, green and blue would overlap each other and the noise would be white/gray
}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////MAIN//////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void main() {
	vec3 color = texture2D(colortex0, texcoord).rgb;

	color = color * EBrightness;

	#ifdef FGrain
		FilmGrain(color);
	#endif

/* DRAWBUFFERS:0 */
	gl_FragData[0] = vec4(color, 1.0); //colortex0
}
